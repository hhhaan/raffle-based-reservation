"""A high precision floating point value represented as a string"""
scalar BigFloat

"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
  eq: BigFloat
  gt: BigFloat
  gte: BigFloat
  in: [BigFloat!]
  is: FilterIs
  lt: BigFloat
  lte: BigFloat
  neq: BigFloat
}

"""
Boolean expression comparing fields on type "BigFloatList"
"""
input BigFloatListFilter {
  containedBy: [BigFloat!]
  contains: [BigFloat!]
  eq: [BigFloat!]
  is: FilterIs
  overlaps: [BigFloat!]
}

"""An arbitrary size integer represented as a string"""
scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is: FilterIs
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "BigIntList"
"""
input BigIntListFilter {
  containedBy: [BigInt!]
  contains: [BigInt!]
  eq: [BigInt!]
  is: FilterIs
  overlaps: [BigInt!]
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  is: FilterIs
}

"""
Boolean expression comparing fields on type "BooleanList"
"""
input BooleanListFilter {
  containedBy: [Boolean!]
  contains: [Boolean!]
  eq: [Boolean!]
  is: FilterIs
  overlaps: [Boolean!]
}

"""
An opaque string using for tracking a position in results during pagination
"""
scalar Cursor

"""A date without time information"""
scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  is: FilterIs
  lt: Date
  lte: Date
  neq: Date
}

"""
Boolean expression comparing fields on type "DateList"
"""
input DateListFilter {
  containedBy: [Date!]
  contains: [Date!]
  eq: [Date!]
  is: FilterIs
  overlaps: [Date!]
}

"""A date and time"""
scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  is: FilterIs
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

"""
Boolean expression comparing fields on type "DatetimeList"
"""
input DatetimeListFilter {
  containedBy: [Datetime!]
  contains: [Datetime!]
  eq: [Datetime!]
  is: FilterIs
  overlaps: [Datetime!]
}

type favorites implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: Int!
  user_id: UUID
  restaurant_id: Int
  restaurant: restaurant
}

type favoritesConnection {
  edges: [favoritesEdge!]!
  pageInfo: PageInfo!
}

type favoritesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [favorites!]!
}

type favoritesEdge {
  cursor: String!
  node: favorites!
}

input favoritesFilter {
  id: IntFilter
  user_id: UUIDFilter
  restaurant_id: IntFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [favoritesFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [favoritesFilter!]

  """Negates a filter"""
  not: favoritesFilter
}

input favoritesInsertInput {
  user_id: UUID
  restaurant_id: Int
}

type favoritesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [favorites!]!
}

input favoritesOrderBy {
  id: OrderByDirection
  user_id: OrderByDirection
  restaurant_id: OrderByDirection
}

input favoritesUpdateInput {
  user_id: UUID
  restaurant_id: Int
}

type favoritesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [favorites!]!
}

enum FilterIs {
  NULL
  NOT_NULL
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: FilterIs
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "FloatList"
"""
input FloatListFilter {
  containedBy: [Float!]
  contains: [Float!]
  eq: [Float!]
  is: FilterIs
  overlaps: [Float!]
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: FilterIs
  lt: Int
  lte: Int
  neq: Int
}

"""
Boolean expression comparing fields on type "IntList"
"""
input IntListFilter {
  containedBy: [Int!]
  contains: [Int!]
  eq: [Int!]
  is: FilterIs
  overlaps: [Int!]
}

"""A Javascript Object Notation value serialized as a string"""
scalar JSON

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the `favorites` collection"""
  deleteFromfavoritesCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: favoritesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): favoritesDeleteResponse!

  """Deletes zero or more records from the `profile` collection"""
  deleteFromprofileCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: profileFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): profileDeleteResponse!

  """Deletes zero or more records from the `raffle` collection"""
  deleteFromraffleCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: raffleFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): raffleDeleteResponse!

  """Deletes zero or more records from the `raffle_participant` collection"""
  deleteFromraffle_participantCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: raffle_participantFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): raffle_participantDeleteResponse!

  """Deletes zero or more records from the `restaurant` collection"""
  deleteFromrestaurantCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: restaurantFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): restaurantDeleteResponse!

  """Deletes zero or more records from the `restaurant_image` collection"""
  deleteFromrestaurant_imageCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: restaurant_imageFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): restaurant_imageDeleteResponse!

  """Deletes zero or more records from the `reviews` collection"""
  deleteFromreviewsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: reviewsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): reviewsDeleteResponse!

  """Deletes zero or more records from the `reviews_image` collection"""
  deleteFromreviews_imageCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: reviews_imageFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): reviews_imageDeleteResponse!

  """Adds one or more `favorites` records to the collection"""
  insertIntofavoritesCollection(objects: [favoritesInsertInput!]!): favoritesInsertResponse

  """Adds one or more `profile` records to the collection"""
  insertIntoprofileCollection(objects: [profileInsertInput!]!): profileInsertResponse

  """Adds one or more `raffle` records to the collection"""
  insertIntoraffleCollection(objects: [raffleInsertInput!]!): raffleInsertResponse

  """Adds one or more `raffle_participant` records to the collection"""
  insertIntoraffle_participantCollection(objects: [raffle_participantInsertInput!]!): raffle_participantInsertResponse

  """Adds one or more `restaurant` records to the collection"""
  insertIntorestaurantCollection(objects: [restaurantInsertInput!]!): restaurantInsertResponse

  """Adds one or more `restaurant_image` records to the collection"""
  insertIntorestaurant_imageCollection(objects: [restaurant_imageInsertInput!]!): restaurant_imageInsertResponse

  """Adds one or more `reviews` records to the collection"""
  insertIntoreviewsCollection(objects: [reviewsInsertInput!]!): reviewsInsertResponse

  """Adds one or more `reviews_image` records to the collection"""
  insertIntoreviews_imageCollection(objects: [reviews_imageInsertInput!]!): reviews_imageInsertResponse

  """Updates zero or more records in the `favorites` collection"""
  updatefavoritesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: favoritesUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: favoritesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): favoritesUpdateResponse!

  """Updates zero or more records in the `profile` collection"""
  updateprofileCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: profileUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: profileFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): profileUpdateResponse!

  """Updates zero or more records in the `raffle` collection"""
  updateraffleCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: raffleUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: raffleFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): raffleUpdateResponse!

  """Updates zero or more records in the `raffle_participant` collection"""
  updateraffle_participantCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: raffle_participantUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: raffle_participantFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): raffle_participantUpdateResponse!

  """Updates zero or more records in the `restaurant` collection"""
  updaterestaurantCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: restaurantUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: restaurantFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): restaurantUpdateResponse!

  """Updates zero or more records in the `restaurant_image` collection"""
  updaterestaurant_imageCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: restaurant_imageUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: restaurant_imageFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): restaurant_imageUpdateResponse!

  """Updates zero or more records in the `reviews` collection"""
  updatereviewsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: reviewsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: reviewsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): reviewsUpdateResponse!

  """Updates zero or more records in the `reviews_image` collection"""
  updatereviews_imageCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: reviews_imageUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: reviews_imageFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): reviews_imageUpdateResponse!
}

interface Node {
  """Retrieves a record by `ID`"""
  nodeId: ID!
}

"""Any type not handled by the type system"""
scalar Opaque

"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
  eq: Opaque
  is: FilterIs
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  """Ascending order, nulls first"""
  AscNullsFirst

  """Ascending order, nulls last"""
  AscNullsLast

  """Descending order, nulls first"""
  DescNullsFirst

  """Descending order, nulls last"""
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type profile implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  name: String
  phone: String
  updated_at: Datetime
}

type profileConnection {
  edges: [profileEdge!]!
  pageInfo: PageInfo!
}

type profileDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [profile!]!
}

type profileEdge {
  cursor: String!
  node: profile!
}

input profileFilter {
  id: UUIDFilter
  name: StringFilter
  phone: StringFilter
  updated_at: DatetimeFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [profileFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [profileFilter!]

  """Negates a filter"""
  not: profileFilter
}

input profileInsertInput {
  id: UUID
  name: String
  phone: String
  updated_at: Datetime
}

type profileInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [profile!]!
}

input profileOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  phone: OrderByDirection
  updated_at: OrderByDirection
}

input profileUpdateInput {
  id: UUID
  name: String
  phone: String
  updated_at: Datetime
}

type profileUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [profile!]!
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `favorites`"""
  favoritesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: favoritesFilter

    """Sort order to apply to the collection"""
    orderBy: [favoritesOrderBy!]
  ): favoritesConnection

  """Retrieve a record by its `ID`"""
  node(
    """The record's `ID`"""
    nodeId: ID!
  ): Node

  """A pagable collection of type `profile`"""
  profileCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: profileFilter

    """Sort order to apply to the collection"""
    orderBy: [profileOrderBy!]
  ): profileConnection

  """A pagable collection of type `raffle`"""
  raffleCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: raffleFilter

    """Sort order to apply to the collection"""
    orderBy: [raffleOrderBy!]
  ): raffleConnection

  """A pagable collection of type `raffle_participant`"""
  raffle_participantCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: raffle_participantFilter

    """Sort order to apply to the collection"""
    orderBy: [raffle_participantOrderBy!]
  ): raffle_participantConnection

  """A pagable collection of type `restaurant`"""
  restaurantCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: restaurantFilter

    """Sort order to apply to the collection"""
    orderBy: [restaurantOrderBy!]
  ): restaurantConnection

  """A pagable collection of type `restaurant_image`"""
  restaurant_imageCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: restaurant_imageFilter

    """Sort order to apply to the collection"""
    orderBy: [restaurant_imageOrderBy!]
  ): restaurant_imageConnection

  """A pagable collection of type `reviews`"""
  reviewsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: reviewsFilter

    """Sort order to apply to the collection"""
    orderBy: [reviewsOrderBy!]
  ): reviewsConnection

  """A pagable collection of type `reviews_image`"""
  reviews_imageCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: reviews_imageFilter

    """Sort order to apply to the collection"""
    orderBy: [reviews_imageOrderBy!]
  ): reviews_imageConnection
}

type raffle implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: Int!
  restaurant_id: Int
  start_datetime: Datetime
  end_datetime: Datetime
  available_seats: Int
  status: String
  restaurant: restaurant
  raffle_participantCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: raffle_participantFilter

    """Sort order to apply to the collection"""
    orderBy: [raffle_participantOrderBy!]
  ): raffle_participantConnection
}

type raffle_participant implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: Int!
  user_id: UUID
  raffle_id: Int
  entry_datetime: Datetime
  is_winner: Boolean
  notification_sent: Boolean
  raffle: raffle
}

type raffle_participantConnection {
  edges: [raffle_participantEdge!]!
  pageInfo: PageInfo!
}

type raffle_participantDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [raffle_participant!]!
}

type raffle_participantEdge {
  cursor: String!
  node: raffle_participant!
}

input raffle_participantFilter {
  id: IntFilter
  user_id: UUIDFilter
  raffle_id: IntFilter
  entry_datetime: DatetimeFilter
  is_winner: BooleanFilter
  notification_sent: BooleanFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [raffle_participantFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [raffle_participantFilter!]

  """Negates a filter"""
  not: raffle_participantFilter
}

input raffle_participantInsertInput {
  user_id: UUID
  raffle_id: Int
  entry_datetime: Datetime
  is_winner: Boolean
  notification_sent: Boolean
}

type raffle_participantInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [raffle_participant!]!
}

input raffle_participantOrderBy {
  id: OrderByDirection
  user_id: OrderByDirection
  raffle_id: OrderByDirection
  entry_datetime: OrderByDirection
  is_winner: OrderByDirection
  notification_sent: OrderByDirection
}

input raffle_participantUpdateInput {
  user_id: UUID
  raffle_id: Int
  entry_datetime: Datetime
  is_winner: Boolean
  notification_sent: Boolean
}

type raffle_participantUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [raffle_participant!]!
}

type raffleConnection {
  edges: [raffleEdge!]!
  pageInfo: PageInfo!
}

type raffleDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [raffle!]!
}

type raffleEdge {
  cursor: String!
  node: raffle!
}

input raffleFilter {
  id: IntFilter
  restaurant_id: IntFilter
  start_datetime: DatetimeFilter
  end_datetime: DatetimeFilter
  available_seats: IntFilter
  status: StringFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [raffleFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [raffleFilter!]

  """Negates a filter"""
  not: raffleFilter
}

input raffleInsertInput {
  restaurant_id: Int
  start_datetime: Datetime
  end_datetime: Datetime
  available_seats: Int
  status: String
}

type raffleInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [raffle!]!
}

input raffleOrderBy {
  id: OrderByDirection
  restaurant_id: OrderByDirection
  start_datetime: OrderByDirection
  end_datetime: OrderByDirection
  available_seats: OrderByDirection
  status: OrderByDirection
}

input raffleUpdateInput {
  restaurant_id: Int
  start_datetime: Datetime
  end_datetime: Datetime
  available_seats: Int
  status: String
}

type raffleUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [raffle!]!
}

type restaurant implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: Int!
  name: String
  address: String
  description: String
  cuisine_type: String
  opening_hours: Time
  closing_hours: Time
  max_capacity: Int
  restaurant_imageCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: restaurant_imageFilter

    """Sort order to apply to the collection"""
    orderBy: [restaurant_imageOrderBy!]
  ): restaurant_imageConnection
  reviewsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: reviewsFilter

    """Sort order to apply to the collection"""
    orderBy: [reviewsOrderBy!]
  ): reviewsConnection
  favoritesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: favoritesFilter

    """Sort order to apply to the collection"""
    orderBy: [favoritesOrderBy!]
  ): favoritesConnection
  raffleCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: raffleFilter

    """Sort order to apply to the collection"""
    orderBy: [raffleOrderBy!]
  ): raffleConnection
}

type restaurant_image implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: Int!
  id2: Int
  restaurant_id: Int
  image_url: String
  image_description: String
  is_primary: Boolean
  restaurant: restaurant
}

type restaurant_imageConnection {
  edges: [restaurant_imageEdge!]!
  pageInfo: PageInfo!
}

type restaurant_imageDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [restaurant_image!]!
}

type restaurant_imageEdge {
  cursor: String!
  node: restaurant_image!
}

input restaurant_imageFilter {
  id: IntFilter
  id2: IntFilter
  restaurant_id: IntFilter
  image_url: StringFilter
  image_description: StringFilter
  is_primary: BooleanFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [restaurant_imageFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [restaurant_imageFilter!]

  """Negates a filter"""
  not: restaurant_imageFilter
}

input restaurant_imageInsertInput {
  id2: Int
  restaurant_id: Int
  image_url: String
  image_description: String
  is_primary: Boolean
}

type restaurant_imageInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [restaurant_image!]!
}

input restaurant_imageOrderBy {
  id: OrderByDirection
  id2: OrderByDirection
  restaurant_id: OrderByDirection
  image_url: OrderByDirection
  image_description: OrderByDirection
  is_primary: OrderByDirection
}

input restaurant_imageUpdateInput {
  id2: Int
  restaurant_id: Int
  image_url: String
  image_description: String
  is_primary: Boolean
}

type restaurant_imageUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [restaurant_image!]!
}

type restaurantConnection {
  edges: [restaurantEdge!]!
  pageInfo: PageInfo!
}

type restaurantDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [restaurant!]!
}

type restaurantEdge {
  cursor: String!
  node: restaurant!
}

input restaurantFilter {
  id: IntFilter
  name: StringFilter
  address: StringFilter
  description: StringFilter
  cuisine_type: StringFilter
  opening_hours: TimeFilter
  closing_hours: TimeFilter
  max_capacity: IntFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [restaurantFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [restaurantFilter!]

  """Negates a filter"""
  not: restaurantFilter
}

input restaurantInsertInput {
  name: String
  address: String
  description: String
  cuisine_type: String
  opening_hours: Time
  closing_hours: Time
  max_capacity: Int
}

type restaurantInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [restaurant!]!
}

input restaurantOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  address: OrderByDirection
  description: OrderByDirection
  cuisine_type: OrderByDirection
  opening_hours: OrderByDirection
  closing_hours: OrderByDirection
  max_capacity: OrderByDirection
}

input restaurantUpdateInput {
  name: String
  address: String
  description: String
  cuisine_type: String
  opening_hours: Time
  closing_hours: Time
  max_capacity: Int
}

type restaurantUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [restaurant!]!
}

type reviews implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: Int!
  user_id: UUID
  restaurant_id: Int
  rating: Int
  comment: String
  review_date: Date
  restaurant: restaurant
  reviews_imageCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: reviews_imageFilter

    """Sort order to apply to the collection"""
    orderBy: [reviews_imageOrderBy!]
  ): reviews_imageConnection
}

type reviews_image implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: Int!
  id2: Int
  image_url: String
  reviews_id: Int
  reviews: reviews
}

type reviews_imageConnection {
  edges: [reviews_imageEdge!]!
  pageInfo: PageInfo!
}

type reviews_imageDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [reviews_image!]!
}

type reviews_imageEdge {
  cursor: String!
  node: reviews_image!
}

input reviews_imageFilter {
  id: IntFilter
  id2: IntFilter
  image_url: StringFilter
  reviews_id: IntFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [reviews_imageFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [reviews_imageFilter!]

  """Negates a filter"""
  not: reviews_imageFilter
}

input reviews_imageInsertInput {
  id2: Int
  image_url: String
  reviews_id: Int
}

type reviews_imageInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [reviews_image!]!
}

input reviews_imageOrderBy {
  id: OrderByDirection
  id2: OrderByDirection
  image_url: OrderByDirection
  reviews_id: OrderByDirection
}

input reviews_imageUpdateInput {
  id2: Int
  image_url: String
  reviews_id: Int
}

type reviews_imageUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [reviews_image!]!
}

type reviewsConnection {
  edges: [reviewsEdge!]!
  pageInfo: PageInfo!
}

type reviewsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [reviews!]!
}

type reviewsEdge {
  cursor: String!
  node: reviews!
}

input reviewsFilter {
  id: IntFilter
  user_id: UUIDFilter
  restaurant_id: IntFilter
  rating: IntFilter
  comment: StringFilter
  review_date: DateFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [reviewsFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [reviewsFilter!]

  """Negates a filter"""
  not: reviewsFilter
}

input reviewsInsertInput {
  user_id: UUID
  restaurant_id: Int
  rating: Int
  comment: String
  review_date: Date
}

type reviewsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [reviews!]!
}

input reviewsOrderBy {
  id: OrderByDirection
  user_id: OrderByDirection
  restaurant_id: OrderByDirection
  rating: OrderByDirection
  comment: OrderByDirection
  review_date: OrderByDirection
}

input reviewsUpdateInput {
  user_id: UUID
  restaurant_id: Int
  rating: Int
  comment: String
  review_date: Date
}

type reviewsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [reviews!]!
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  iregex: String
  is: FilterIs
  like: String
  lt: String
  lte: String
  neq: String
  regex: String
  startsWith: String
}

"""
Boolean expression comparing fields on type "StringList"
"""
input StringListFilter {
  containedBy: [String!]
  contains: [String!]
  eq: [String!]
  is: FilterIs
  overlaps: [String!]
}

"""A time without date information"""
scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  is: FilterIs
  lt: Time
  lte: Time
  neq: Time
}

"""
Boolean expression comparing fields on type "TimeList"
"""
input TimeListFilter {
  containedBy: [Time!]
  contains: [Time!]
  eq: [Time!]
  is: FilterIs
  overlaps: [Time!]
}

"""A universally unique identifier"""
scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  is: FilterIs
  neq: UUID
}

"""
Boolean expression comparing fields on type "UUIDList"
"""
input UUIDListFilter {
  containedBy: [UUID!]
  contains: [UUID!]
  eq: [UUID!]
  is: FilterIs
  overlaps: [UUID!]
}

